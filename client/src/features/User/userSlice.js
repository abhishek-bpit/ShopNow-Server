//! IMPORTANT: Now We dont Need to pass User ID (user.id) as in Backend It will take loggedIn UserId Automatically from req.user and Then Add to Api Call. Hence From Frontend we just need to hit on paticular Api Path without userId

import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchLoggedInUser, fetchUserOrders, updateUser } from "./userAPI";


const initialState = {
  userInfo:
    null /* it Contins All The Info Related to User like Name eamil address id orders and all other deatils*/,
  status: "idle",
};

// To fetch All Details Of LoggedIn User It will Fetch Complete Details
export const fetchLoggedInUserAsync = createAsyncThunk(
  "user/fetchLoggedInUser",
  async (rejectWithValue) => {
    try {
      const response = await fetchLoggedInUser();
     
      return response.data;
    } catch (error) {
      return rejectWithValue(error);
    }
  }
);
// To Fetch All Orders Of User
// userId Provided In backend
export const fetchUserOrdersAsync = createAsyncThunk(
  "user/fetchUserOrders",
  async () => {
    const response = await fetchUserOrders();
    return response.data;
  }
);

// to update User
// for Address update Or Adding new Addresses
export const updateUserAsync = createAsyncThunk(
  "user/updateUser",
  async (update) => {
    const response = await updateUser(update);
    return response.data;
  }
);

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // to fetch User Info
      .addCase(fetchLoggedInUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload;
      })
      .addCase(fetchLoggedInUserAsync.rejected, (state, action) => {
        state.status = "idle";
        state.userInfo = null;
      })
      // Fetch orders
      .addCase(fetchUserOrdersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchUserOrdersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo.orders = action.payload;
      })
      // Update User address
      .addCase(updateUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.userInfo = action.payload;
      });
  },
});

export const selectCompleteUserInfo = (state) => state.user.userInfo;
export const selectCompleteUserOrder = (state) => state.user.userInfo.orders;
export const selectUserStatus = (state) => state.user.status;
export default userSlice.reducer;
