import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchProducts,
  fetchProductsByFilters,
  fetchBrands,
  fetchCategories,
  fetchProductsById,
  createNewProduct,
  updateProduct,
  fetchSearchedProducts,
} from "./productAPI";

const initialState = {
  products: [],
  categories: [],
  brands: [],
  status: "idle",
  totalItems: 0,
  selectedProduct: null,
  searchedProducts: [],
};

// ->>>>>>>>> Actions

// to Fetch all products
export const fetchAllProductsAsync = createAsyncThunk(
  "product/fetchProducts",
  async () => {
    const response = await fetchProducts();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// to Fetch Filtered Products
// in Redux syntax we need to pass two values in object like ==>{filter,sort}
export const fetchProductsByFiltersAsync = createAsyncThunk(
  "product/fetchProductsByFiltersAsync",
  async ({ filter, sort, pagination, admin }) => {
    const response = await fetchProductsByFilters(
      filter,
      sort,
      pagination,
      admin
    );
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// to Fetch all Brands
export const fetchBrandsAsync = createAsyncThunk(
  "product/fetchBrands",
  async () => {
    const response = await fetchBrands();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// to Fetch all Categories
export const fetchCategeriesAsync = createAsyncThunk(
  "product/fetchCategories",
  async () => {
    const response = await fetchCategories();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

// Fetch Products By Id
// to Fetch all Categories
export const fetchProductsByIdAsync = createAsyncThunk(
  "product/fetchProductsById",
  async (id) => {
    const response = await fetchProductsById(id);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchSearchedProductsAsync = createAsyncThunk(
  "product/fetchSearchedProducts",
  async (input) => {
    if (!input) {
      // If input is not provided or is empty
      return [];
    }
    const response = await fetchSearchedProducts(input);
    return response.data;
  }
);

// for Admin
// Create New Product or AddNew Product In Db
export const createNewProductAsync = createAsyncThunk(
  "product/createNewProduct",
  async (product) => {
    const response = await createNewProduct(product);
    return response.data;
  }
);

// Update Existing product
export const updateProductAsync = createAsyncThunk(
  "product/updateProduct",
  async (update) => {
    const response = await updateProduct(update);
    return response.data;
  }
);

// ->>>>>>>>> Reducers

// Here Reducer Function is defined
// Name of reducer= name: 'product'
export const ProductSlice = createSlice({
  name: "product",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearSelectedProduct: (state) => {
      state.selectedProduct = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      // Reducer to fetch All Products
      .addCase(fetchAllProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products = action.payload.products;
      })
      // Reducer to fetch Filtered Products
      .addCase(fetchProductsByFiltersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProductsByFiltersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products = action.payload.products;
        state.totalItems = action.payload.totalItems;
      })
      // for Brands
      .addCase(fetchBrandsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchBrandsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.brands = action.payload;
      })
      // For Categories
      .addCase(fetchCategeriesAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchCategeriesAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.categories = action.payload;
      })
      // Fetch Products By Id.
      .addCase(fetchProductsByIdAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchProductsByIdAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.selectedProduct = action.payload;
      })
      // Fetch Searched Products.
      .addCase(fetchSearchedProductsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchSearchedProductsAsync.fulfilled, (state, action) => {
        state.status = "idle";
       
        state.searchedProducts = action.payload;
      })
      // For Admin To add New Product
      .addCase(createNewProductAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createNewProductAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.products.push(action.payload);
      })
      // For Admin To Update existing Product Product
      .addCase(updateProductAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateProductAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.products.findIndex(
          (product) => product.id === action.payload.id
        );
        state.products[index] = action.payload;
        state.selectedProduct = action.payload;
      });
  },
});

export const { clearSelectedProduct } = ProductSlice.actions;

// to get Product Array
export const selectAllProduct = (state) => state.product.products;
// For Pagination
export const selectTotalItems = (state) => state.product.totalItems;
// to fetch Brands
export const selectAllBrands = (state) => state.product.brands;
// to fetch categories
export const selectAllCategories = (state) => state.product.categories;
// Select PRODUCT by Id
export const selectProductById = (state) => state.product.selectedProduct;
// to select status to use in react loading
export const selectProductListStatus = (state) => state.product.status;
// to get all searched products
export const selectSearchedProducts = (state) => state.product.searchedProducts;

export default ProductSlice.reducer;
